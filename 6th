#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <chrono>
#include <omp.h>

#define N 1000
#define MAX_THREADS 4

int A[N][N], B[N][N], C[N][N];

int main() {
    srand(time(0));

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
        }
    }

    auto start_time = std::chrono::high_resolution_clock::now();

    #pragma omp parallel for num_threads(MAX_THREADS)
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            int sum = 0;
            for (int k = 0; k < N; ++k) {
                sum += A[i][k] * B[k][j];
            }
            C[i][j] = sum;
        }
    }

    auto end_time = std::chrono::high_resolution_clock::now();
    auto elapsed_time = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);

    printf("Execution time: %lld microseconds\n", elapsed_time.count());

    return 0;
}
