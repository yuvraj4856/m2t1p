#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <chrono>
#include <omp.h>

#define N 3
#define MAX_THREADS 16

int A[N][N], B[N][N], C[N][N];

int main() {
    srand(time(0));
    std::chrono::microseconds elapsed_time[MAX_THREADS];

    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            A[i][j] = rand() % 10;
            B[i][j] = rand() % 10;
        }
    }

    for (int threads = 2; threads <= MAX_THREADS; ++threads) {
        auto start_time = std::chrono::high_resolution_clock::now();

        #pragma omp parallel for num_threads(threads)
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                int sum = 0;
                for (int k = 0; k < N; ++k) {
                    sum += A[i][k] * B[k][j];
                }
                C[i][j] = sum;
            }
        }

        auto end_time = std::chrono::high_resolution_clock::now();
        elapsed_time[threads-1] = std::chrono::duration_cast<std::chrono::microseconds>(end_time - start_time);
    }

    printf("Matrix A:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            printf("%d ", A[i][j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("Matrix B:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            printf("%d ", B[i][j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("Matrix C:\n");
    for (int i = 0; i < N; ++i) {
        for (int j = 0; j < N; ++j) {
            printf("%d ", C[i][j]);
        }
        printf("\n");
    }
    printf("\n");

    printf("Execution time for different number of threads:\n");
    for (int threads = 2; threads <= MAX_THREADS; ++threads) {
        printf("%d threads: %ld microseconds\n", threads, elapsed_time[threads-1].count());
    }

    return 0;
}
